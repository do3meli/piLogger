#!/bin/bash

this_dir=$(cd `dirname $0`; pwd)
this_script=$(basename $0)

. $this_dir/../etc/piLogger.conf
. $this_dir/functions
. $this_dir/functions-sqlite3


#--------------------------------
# usage()
#--------------------------------
usage(){
  cat<<EOT

Uage:

  `basename $0` { --db } [options]

Actions:
  -l --list { list options }        - List

List options:
  -a                     - List aliases
  -d                     - List devices
  -pg                    - List plot groups (devices added to plot groups)
  -pc                    - List plot config (what plot groups will be visible on the web page at what priority) 

Options:

  --db                   - List content of the database
  -a|--aliases           - Show aliases for devices
  -af|--aliasFile        - generate a dummy alias file output
  --scan                 - Scan for devices into etc/devices.scanned
  -l --list              - List verbose db content

  --deviceId ID          - Device Id
  --deviceAlias ALIAS    - Device alias
  --devicePath PATH      - Device path
  --deviceType NAME      - Device type, i.e --deviceType 1wire
  --plotGroup NAME       - Plot group name

  --rowId ROWID          - When using row id to remove items

  --setup --db     - Will check the database for needed tables, and create them if needed

Examples:

  ./$this_script --setup --db       ; # setup or repair the application configuration database
  ./$this_script --scan             ; # scan for new devices. new devices need to be added to the database by copy/paste

  #--- Add new 1wire device by id and device path (can be copy/pasted from --scan output)
  ./$this_script --add -d --deviceType 1wire --deviceId 28.EFBB4E050000 --devicePath /mnt/1wire/28.EFBB4E050000

  #--- Add alias to a device
  ./$this_script --add -a --deviceId 28.263943050000 --deviceAlias first

  #--- Remove an alias
  ./$this_script --remove -a --deviceAlias first

  #--- Create a plot group "default" consisting of all devices
  ./$this_script -d | xargs -L1 -I X ./dbTool --add -pg --plotGroup default --deviceId X

  #--- Create a plot config "default" consisting of all devices in plot group "default". 
  ./$this_script -pc --add --plotConfig default --plotGroup default --timeSpan 12h --plotWidth 12 --plotPriority 1

  #-- Remove a plot config (get rowId from ./$this_script -pc)
  ./$this_script -pc --remove --rowId 5

EOT
}
#--------------------------------
# printNormal
#--------------------------------
printNormal(){
  for device in  $all_devices
  do
    echo "$device"
  done
}

#--------------------------------
# printWithAliases
#--------------------------------
printWithAliases(){
  for device in $all_devices
  do
    deviceType=$(getDeviceTypeByDevicePath $device)
    deviceAliases="$(getDeviceAliasesByDevicePath `basename $device`)"
    echo "Device: $device Type: $deviceType Device Aliases: $deviceAliases"
  done
}

printAliasFileFormat(){
  n=1
  for device in $all_devices
  do
    echo "alias${n};1wire;$device"
    ((n+=1))
  done
}

printAllJSON(){
  printf "["
  local prependComma=" "
  for device in $all_devices
  do
    pj_deviceAliases=$(getDeviceAliasesByDevicePath $device | sed -e 's/ $//' -e 's/ /","/g')
    deviceTemperature=$(getLastRRDUpdate ${device##*/} )
    printf '%s\n{ "sensorName":"%s", "devicePath":"%s" , "aliases":["%s"], "temperature":%s }' "$prependComma" ${device##*/} ${device} ${pj_deviceAliases} ${deviceTemperature}
    prependComma=","
  done
  printf '\n]\n'
  return 0
}

printAliasesJSON(){
  printf '['
  local prependComma=""
  for device in $all_devices
  do
    pj_deviceName=$(basename $device)
    pj_deviceAliases=$(getDeviceAliasesByDevicePath $device | sed -e 's/ $//' -e 's/ /","/g')
    printf "%s" "$prependComma"
    printf '\n{ "sensorName":"%s", "devicePath":"%s" , "aliases":["%s"] }' ${pj_deviceName} ${device} ${pj_deviceAliases} 
    prependComma=","
  done
  printf '\n]\n'
}

printPathJSON(){
  printf '['
  local prependComma=""
  for device in $all_devices
  do
    pj_deviceName=$(basename $device)
    pj_deviceAliases=$(getDeviceAliasesByDevicePath $device | sed -e 's/ $//' -e 's/ /","/g')
    printf "%s" "$prependComma"
    printf '\n{ "sensorName":"%s", "devicePath":"%s" }' ${pj_deviceName} ${device} 
    prependComma=","
  done
  printf '\n]\n'
}

printDbDeviceAliases(){

  echo "device ID       | device alias"
  echo "----------------+---------------"
  for curDeviceId in $(dbGetAllDeviceIds)
  do
    curDeviceAlias=$(dbGetDeviceAliasById $curDeviceId)
#    echo "device id: $curDeviceId device alias: $curDeviceAlias" 1>&2
    printf "%-15s | %s\n" $curDeviceId $curDeviceAlias
  done
}

printDbVerbose(){
  printDbDeviceAliases
}

#====================================
# MAIN
#====================================

[ -z "$1" ] && { usage ; exit 0 ; }

listDB=true
actionList=true
cmdAction=list

while [ -n "$1" ]
do
  case $1 in
    #--- cmdAction
    --add)
      cmdAction=add
      actionAdd=true
      shift
      ;;
    --remove)
      cmdAction=remove
      shift
      ;;
    --setup|-s)
      cmdAction=setup
      shift
      ;;

    --deviceId)
      deviceId="$2"
      shift ; shift 
      ;;
    --deviceType)
      deviceType="$2"
      shift ; shift
      ;;
    --devicePath)
      devicePath="$2"
      shift ; shift
      ;;
    --deviceAlias)
      deviceAlias="$2"
      shift ; shift
      ;;
    --plotGroup)
      plotGroup="$2"
      shift ; shift
      ;;
    --plotConfig)
      plotConfig="$2"
      shift ; shift
      ;;
    --timeSpan)
      timeSpan="$2"
      shift ; shift
      ;;
    --plotWidth)
      plotWidth="$2"
      shift ; shift
      ;;
    --plotPriority)
      plotPriority="$2"
      shift ; shift
      ;;
    --plotVisibility)
      plotVisibility="$2"
      shift ; shift
      ;;
    
    --rowId)
      rowId="$2"
      shift; shift
      ;;

     
    --db)
      actionType=db
      shift
      ;;

    --aliasFile|-af)
      printAliasFileFormat
      shift
      exit 0
      ;;
    --alias|-a)
      actionType=alias
      shift
      ;;
    -d|--device)
      actionType=device
      shift
      ;;
    -pg)
      #--- for print plot group
      actionType=plotGroup
      shift
      ;;
    -pc)
      #--- for print plot group
      actionType=plotConfig
      shift
      ;;
    --info)
      listInfo=true
      shift
      ;;
    --json|-j)
      printJSON=true
      shift
      ;;
    --scan)
      scanDevices=true
      shift
      ;;
    -l|--list)
      actionList=true
      shift
      ;;
    *)
      usage
      exit
      ;;
  esac 
done


[[ -n "$scanDevices" ]] && { 
  all_devices=$(getAllDevices $oneWireDir -f)
  logIt "  - Scanning for devices into $configDir/devices.scanned" 
  printNormal > $configDir/devices.scanned.new
  cat $configDir/devices.scanned.new 
  mv $configDir/devices.scanned.new $configDir/devices.scanned

  echo "Add devices not yet in the database by copy/paste the following:"
  echo
  
  for device in $(cat $configDir/devices.scanned 2>/dev/null)
  do
    shortDevice=$(basename $device);
    if ! dbCheckDeviceExistById $shortDevice
    then
      echo ./dbTool --add -d --deviceType 1wire --deviceId $shortDevice --devicePath $device;
    fi
  done

  exit 0 
}

[[ -n "$cmdAction" && "$actionType" != "setup" ]] &&  all_devices=$(getAllDevices $oneWireDir)

case $cmdAction in
  list)
    [[ -n "$actionType" && "$actionType" = "alias" ]] &&   { printDbDeviceAliases ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "device" ]] && { dbGetAllDeviceIds ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotGroup" ]] && { dbPrintPlotGroups ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotConfig" ]] && { dbPrintPlotConfig ; exit 0 ; }
    [[ -n "$actionList" ]]   && { printDbVerbose ; exit 0 ; } 
    ;;
  add)
    [[ -n "$actionType" && "$actionType" = "device" ]] && { dbAddDevice "$deviceId" "$deviceType" "$devicePath" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "alias" ]] && { dbAddDeviceAlias "$deviceId" "$deviceAlias" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotGroup" && -n "$deviceId" ]] && { dbAddDeviceIdToPlotGroup "$plotGroup" "$deviceId" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotGroup" && -n "$deviceAlias" ]] && { dbAddDeviceAliasToPlotGroup "$plotGroup" "$deviceAlias" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotConfig" ]] && { dbAddPlotGroupToPlotConfig "$plotConfig" "$plotGroup" "$timeSpan" "$plotWidth" "$plotPriority" "$plotVisibility" ; exit 0 ; }
    ;;
  remove)
    [[ -n "$actionType" && "$actionType" = "device" ]] && { dbRemoveDevice "$deviceId" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "alias" ]] && { dbRemoveDeviceAlias "$deviceId" "$deviceAlias" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotGroup" && -n "$deviceAlias" ]] && { dbRemoveDeviceAliasFromPlotGroup "$plotGroup" "$deviceAlias" ; exit 0 ; }
    [[ -n "$actionType" && "$actionType" = "plotConfig" && -n "$rowId" ]] && { dbRemovePlotConfigByRowId "$rowId" ; exit 0 ; }
    ;;
  setup)
    [[ -n "$actionType" && "$actionType" = "db" ]] && { dbSetupDatabase ; exit 0 ; }
    ;; 
esac
