thisScript=$(basename $0)
[ -z "$logDir" ] && logDir=/var/log/piLogger
logFile=$logDir/$thisScript.log
configDir=$this_dir/../etc
piLoggerDeviceAliasFile=$configDir/aliases.conf

. $configDir/piLogger.conf
[ -z "$dbDir" ] && dbDir=$oneWireDataDir/db
[ -z "$graphDir" ] && graphDir=$oneWireDataDir/graphs

#------------------------------------
# errorExit
#------------------------------------
errorExit(){
  logIt "ERROR: $@"
  exit 1
}

#------------------------------------
# logIt
#------------------------------------
logIt(){
  logIt_TS=$(date "+%Y%m%d_%H%M%S")
  echo "$logIt_TS;$thisScript;$@" >> $logFile
  echo "$logIt_TS;$thisScript;$@" 1>&2
}

#------------------------------------
# listDevices
#------------------------------------
getAllDevices(){
  ld_dir="$1"
  ld_force="$2"

  [[ -f $configDir/devices.scanned && -z "$ld_force" ]] && { cat $configDir/devices.scanned ; return 0 ; }
  local curRes=$(dbGetAllDevicePaths)
  [ -n "$curRes" ] && { echo $curRes ; return 0 ; }
  logIt "No scanned devices, cheking in fs."
  echo $ld_dir/bus*/[0-9]* | grep -v "\*$"
}

getAllDeviceNames(){
  ld_dir=$1
  ls -1 $ld_dir/bus* | grep "^[0-9]" 
}

getDeviceTypeByDevicePath() {
  cur_deviceType=$(cat $1/type)
  [ -n "$debug" ] && echo "Device type: $cur_deviceType" 1>&2
  echo $cur_deviceType
}

getTemperatureByDevicePath(){
  curOut=$(cat $1/$temperatureFile | awk '{temp=$NF + 0.005; printf "%.2f\n",temp; }')
  [ -n "$debug" ] && logIt "device: $1 temperature: $curOut"
  echo $curOut
}

getTemperatureByDeviceAlias(){
  getTemperatureByDevicePath $(getDevicePathByAlias $1)
}

getDeviceAliasesByDevicePath() {
  #cur_deviceAliases=$(grep -v "^#" $piLoggerDeviceAliasFile | grep -v "^#" | awk -F";" -v ID=$1 ' $0 !~ /^#/ { if (match ($NF, ID)) { printf "%s ", $1 }}')
  #cur_deviceAliases=$(awk -F";" -v ID=$1 ' $0 !~ /^#/ { if (match ($NF, ID)) { printf "%s ", $1 }}'  $piLoggerDeviceAliasFile )
  cur_deviceAliases=$(dbGetDeviceAliasByDevicePath $1)
  [ -n "$debug" ] && echo "getDeviceAliasesByDeviceId() Device aliases: $cur_deviceAliases" 1>&2
  echo "$cur_deviceAliases"
}

getDeviceByAlias(){
  [ -z "$1" ] && return 0
  grep "^${1};" $piLoggerDeviceAliasFile | cut -d";" -f3  | awk -F"/" '{print $NF}'
}

getDevicePathByAlias(){
  grep "^${1};" $piLoggerDeviceAliasFile | cut -d";" -f3 
}

getLastRRDUpdate(){
  curDevice=$1

  #--- you will need the device name, like 28.12ED2F040000
  #--- which is to be found either right away, or by alias
  [ -n "$debug" ] && logIt "getLastRRDUpdate: $curDevice"
  #[ ! -f $oneWireDataDir/db/$curDevice.rrd ] && curDevice=$(getDeviceByAlias $1)
  #rrdtool info $oneWireDataDir/db/${curDevice}.rrd | grep last_ds | cut -d"=" -f2 | sed -e 's/[ "]//g'
  rrdtool info $oneWireDataDir/db/${curDevice}.rrd | sed -n 's/ds\[temperature\]\.last_ds = "\(.*\)"/\1/gp'
}

#---------------------------------
#logTemperature
#---------------------------------
logTemperature(){
  lt_device=$1
  lt_temperature=$2

  lt_dbFile=$dbDir/${lt_device}.rrd

  [ ! -f $lt_dbFile ] && sudo -u pi $this_dir/createRRD $lt_device
  [ ! -f $lt_dbFile ] && { logIt "ERROR: no rrd database: $lt_dbFile" ; return 1 ; } 
  rrdtool update $lt_dbFile N:${lt_temperature}

  [ -n "$remoteLogging" ] && logTemperatureRemote $lt_device $lt_temperature

}

logTemperatureRemote(){
  ltr_device=$1
  ltr_temperature=$2

  wget -q -O - "http://d1wire/api/sensor/${ltr_device}/set/temperature/${ltr_temperature}"
}
#---------------------------------
# getDBFilesFromGraphTemplate
#---------------------------------
getDBFilesFromGraphTemplate(){
  local n
  for n in $(cat $configDir/graph.$1.conf | grep -v "^#" | cut -d";" -f1)
  do
    getDeviceByAlias $n
  done
}
#---------------------------------
#---------------------------------
# getDBFileByAlias
#---------------------------------
getDBFileByAlias(){
  local curDevice

  if [ -a $dbDir/${1##*/}.rrd ]
  then
    echo $dbDir/${1##*/}.rrd
  else
    curDevice=$(getDeviceByAlias $1) 
    [ -n "$curDevice" ] && echo $dbDir/${curDevice}.rrd 
  fi
}

#---------------------------------
# getGraphColorFromGraphTemplateByAlias
#---------------------------------
getGraphColorFromGraphTemplateByAlias(){
  local curAlias
  local curGraphName

  curGraphName=$1
  curAlias=$2

#  logIt "  - curGraphName: $curGraphName"
#  logIt "  - curAlias: $curAlias"
#  logIt "  - curFile: $configDir/graph.$curGraphName.conf"
#  cat $configDir/graph.$curGraphName.conf | grep -v "^#" | grep "^${curAlias};" | cut -d";" -f2 1>&2
  cat $configDir/graph.$curGraphName.conf | grep -v "^#" | grep "^${curAlias};" | cut -d";" -f2 | sed -e 's/#//'

}
#---------------------------------
# getAliasesFromGraphTemplate
#---------------------------------
getAliasesFromGraphTemplate(){
  cat $configDir/graph.$1.conf 2>/dev/null | grep -v "^#" | cut -d";" -f1
}

