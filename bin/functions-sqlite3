#---------------------------------
# dbGetAllDevices()
#---------------------------------

function dbGetAllDevices(){
  sqlite3 $appDbFile<<EOT
  select id from sensor;
EOT
}

#---------------------------------
# dbGetDBFileByAlias()
#---------------------------------
function dbGetDBFileByAlias(){
  local curSensorType=$2
  [ -z "$curSensorType" ] && curSensorType=temperature

  [ -f "$rrdDir/${1}.${curSensorType}.rrd" ] && { echo "$rrdDir/$1.${curSensorType}.rrd" ; return 0 ; }

  local curSensorId=$(dbGetDeviceIdByDeviceAlias "$1")
  echo $rrdDir/${curSensorId}.${curSensorType}.rrd
}

#---------------------------------
# dbGetDeviceIdByDeviceAlias()
#---------------------------------
function dbGetDeviceIdByDeviceAlias(){
  sqlite3 $appDbFile<<EOT
  select id from alias where alias = '$1'; 
EOT
}

#---------------------------------
# dbGetAliasesFromDeviceGroup()
#---------------------------------
function dbGetAliasesFromDeviceGroup(){
  sqlite3 $appDbFile<<EOT
  select a.alias from alias a, sensorgroup b where a.id = b.sensor_id and b.groupname = '$1';
EOT
}

#---------------------------------
# dbGetAliasesFromPlotGroup()
#---------------------------------
function dbGetAliasesFromPlotGroup(){
  #--- Make sure to return deviceId if there is no alias for the sensor
  sqlite3 $appDbFile<<EOT
  select ifnull(al.alias,pg.sensor_id) from plotgroup pg left outer join alias al on pg.sensor_id = al.id where pg.groupname = '$1';
  -- select a.alias from alias a, plotgroup b where a.id = b.sensor_id and b.groupname = '$1';
EOT
}

function dbGetAliasTokensFromPlotGroup(){
  #--- Make sure to return deviceId if there is no alias for the sensor
  sqlite3 $appDbFile<<EOT
    select sensorname.name || ':' || ifnull(pg.metric,'temperature') || ':' || ifnull(sensorname.multiplier,1) from (select sensor.id, sensor.metric, sensor.multiplier, ifnull(alias.alias,sensor.id) as name from sensor left outer join alias on sensor.id = alias.id) sensorname, plotgroup pg where pg.sensor_id = sensorname.id and sensorname.metric = pg.metric and pg.groupname = '$1';
  -- select ifnull(al.alias,pg.sensor_id) || ':' || ifnull(pg.metric,'temperature') || ':' || multiplier from plotgroup pg left outer join alias al on pg.sensor_id = al.id left outer join sensor on pg.sensor_id = sensor.id where pg.groupname = '$1';
  -- select ifnull(al.alias,pg.sensor_id) || ':' || ifnull(pg.metric,'temperature') from plotgroup pg left outer join alias al on pg.sensor_id = al.id where pg.groupname = '$1';
  -- select a.alias from alias a, plotgroup b where a.id = b.sensor_id and b.groupname = '$1';
EOT
}

#---------------------------------
# dbGetDeviceIdsFromPlotGroup()
#---------------------------------
function dbGetDeviceIdsFromPlotGroup(){
  sqlite3 $appDbFile<<EOT
  select sensor_id from plotgroup where groupname = '$1';
EOT
}

#---------------------------------
# dbGetAllDeviceGroups()
#---------------------------------
function dbGetAllDeviceGroups(){
  sqlite3 $appDbFile<<EOT
  select distinct groupname from sensorgroup;
EOT
}

#---------------------------------
# dbGetAllPlotGroups()
#---------------------------------
function dbGetAllPlotGroups(){
  sqlite3 $appDbFile<<EOT
  select distinct groupname from plotgroup;
EOT
}

#---------------------------------
# dbGetAggregateTypeByPlotDeviceAlias
#---------------------------------
function dbGetAggregateTypeByPlotDeviceAlias(){
  local curAggregate=$(
  sqlite3 $appDbFile<<EOT
  select plot_type from plotgroup a, alias b where a.groupname = '$1' and b.alias  = '$2' and a.sensor_id = b.id;
EOT
)

  [ -n "$curAggregate" ] && { echo "$curAggregate" ; return 0 ; }
  [ -z "$curAggregate" ] && { echo "AVERAGE" ; return 0 ; }
}

#---------------------------------
# dbGetAllLocalSensorIds()
#---------------------------------
function dbGetAllLocalSensorIds(){
  sqlite3 $appDbFile<<EOT
  select id from sensor where type='1wire';
EOT
}

function dbGetAllLocalAndActiveSensorAndMetricIds(){
  sqlite3 -separator " " $appDbFile "select id, metric from sensor where type in ('1wire') and active='true';"
}

function dbGetAllLocalSensorAndMetricIds(){
  sqlite3 -separator " " $appDbFile "select id, metric from sensor where type='1wire';"
}

#---------------------------------
# dbGetAllDeviceIds()
#---------------------------------
function dbGetAllDeviceIds(){
  sqlite3 $appDbFile<<EOT
  select id from sensor;
EOT
}

#---------------------------------
# dbGetAllDevicePaths()
#---------------------------------
function dbGetAllDevicePaths(){
  sqlite3 $appDbFile "select path from sensor where path <> '';"
}

#---------------------------------
# dbGetDeviceAliasById()
#---------------------------------
function dbGetDeviceAliasById(){
  curRes=$(sqlite3 $appDbFile<<EOT
  select alias from alias where id = '$1';
EOT
)

  if [ -n "$curRes" ]
  then
    echo "$curRes"
  else
    echo "$1"
  fi
}

#---------------------------------
# dbDeviceHasDeviceAlias()
#---------------------------------
function dbDeviceHasDeviceAlias(){
  local sensor="$1"

  local res=$(
    sqlite3 $appDbFile<<EOT
   select count(*) from alias where id = '$sensor'; 
EOT
)
  [ $res -gt 0 ] && return 0
  return 1
}

#---------------------------------
# isCompositeDevice()
#---------------------------------
function isCompositeDevice(){
  local curSensor="$1"
  curRes=$(sqlite3 $appDbFile "select count(*) from sensor where type = 'composite' and id = '$curSensor';")

  [ $curRes -eq 0 ] && return 1
  return 0
}

#---------------------------------
# dbGetAllCompositeSensors()
#---------------------------------
function dbGetAllCompositeSensors(){
  sqlite3 $appDbFile "select id from sensor where type = 'composite';"
}

#---------------------------------
# dbGetAllScriptSensors()
#---------------------------------
function dbGetAllScriptSensors(){
  sqlite3 $appDbFile "select id from sensor where type = 'script';"
}

#---------------------------------
# dbGetScriptBySensorId()
#---------------------------------
function dbGetScriptBySensorId(){
  sqlite3 $appDbFile "select path from sensor where id = '$1';"
}


#---------------------------------
# dbGetDevicePathByDeviceId()
#---------------------------------
function dbGetDevicePathByDeviceId(){
  local alias="$1"
  local res=$(
    sqlite3 $appDbFile<<EOT
    select a.path from sensor a where a.id = '$alias';
EOT
)

  if [ -n "$res" ]
  then
    echo "$res"
  fi
}

#---------------------------------
# dbGetDevicePathByDeviceAlias()
#---------------------------------
function dbGetDevicePathByDeviceAlias(){
  local alias="$1"
  local res=$(
    sqlite3 $appDbFile<<EOT
    select a.path from sensor a, alias b where a.id = b.id and b.alias = '$alias' limit 1;
EOT
)

  if [ -n "$res" ]
  then
    echo "$res"
  fi
}

#---------------------------------
# dbGetDeviceAliasByDevicePath()
#---------------------------------
function dbGetDeviceAliasByDevicePath(){
  curRes=$(sqlite3 $appDbFile<<EOT
  select a.alias from alias a, sensor b where b.path = '$1' and a.id = b.id;
EOT
)

  if [ -n "$curRes" ]
  then
    echo "$curRes"
  else
    echo "$1"
  fi
}

#---------------------------------
# dbAddDevice()
#---------------------------------
function dbAddDevice(){
  local sensor="$1"
  local sensorType="$2"
  local sensorPath="$3"
  local sensorMetric="$4"

  [ -z "$sensorMetric" ] && sensorMetric=temperature

  echo "  - Adding sensor: $sensor type: $sensorType path: $sensorPath metric: $sensorMetric"
  sqlite3 $appDbFile<<EOT
  insert into sensor (id, type, path, active, metric) values ('$sensor', '$sensorType', '$sensorPath', 'true', '$sensorMetric');
EOT
}

#---------------------------------
# dbRemoveDevice()
#---------------------------------
function dbRemoveDevice(){
  echo "  - Removing sensor: $1"
  sqlite3 $appDbFile<<EOT
  delete from sensor where id = '$1';
EOT
}

#---------------------------------
# dbAddDeviceAlias()
#---------------------------------
function dbAddDeviceAlias(){
  if dbDeviceHasDeviceAlias "$1"
  then
    dbRemoveDeviceAliasByDeviceId "$1"
  fi

  echo "  - Adding sensor alias: $1 -> $2"
  sqlite3 $appDbFile<<EOT
  insert into alias (id, alias) values ('$1', '$2');
EOT
}

#---------------------------------
# dbRemoveDeviceAlias()
#---------------------------------
function dbRemoveDeviceAlias(){
  local id="$1"
  local alias="$2"
  echo "  - Removing sensor alias: $id $alias"
  sqlite3 $appDbFile<<EOT
  delete from alias where alias = '$alias';
EOT
}

#---------------------------------
# dbRemoveDeviceAliasByDeviceId()
#---------------------------------
function dbRemoveDeviceAliasByDeviceId(){
  local id="$1"
  echo "  - Removing sensor alias for sensor: $1"
  sqlite3 $appDbFile<<EOT
  delete from alias where id = '$id';
EOT
}




#===================================================================================================
# Plot Group functions
#===================================================================================================

#---------------------------------
# dbGetPlotGroupMemberIdsByPlotGroupId()
#---------------------------------
function dbGetPlotGroupMemberIdsByPlotGroupId(){
  sqlite3 $appDbFile<<EOT
  select sensor_id from plotgroup where groupname = '$1';
EOT
}

#---------------------------------
# dbPrintPlotGroups()
#---------------------------------
function dbPrintPlotGroups(){
  local plotgroup=""
  local curDeviceId=""

  for plotgroup in $(dbGetAllPlotGroups)
  do
    printf "%-20s :" $plotgroup 
    for curDeviceId in $(dbGetPlotGroupMemberIdsByPlotGroupId $plotgroup)
    do
      local curDeviceAlias=$(dbGetDeviceAliasById $curDeviceId)
      #echo -n " $dpapg_curDeviceId($curDeviceAlias)"
      echo -n " $curDeviceAlias"
    done
    echo
  done
}

#---------------------------------
# dbAddDeviceIdToPlotGroup()
#---------------------------------
function dbAddDeviceIdToPlotGroup(){
  echo "  - Adding sensor id to plotgroup: $1 -> $2"
  sqlite3 $appDbFile<<EOT
  insert into plotgroup (groupname, sensor_id) values ('$1', '$2');
EOT
}

#---------------------------------
# dbAddDeviceAliasToPlotGroup()
#---------------------------------
function dbAddDeviceAliasToPlotGroup(){
  echo "  - Adding sensor alias: $1 -> $2"
  dbAddDeviceIdToPlotGroup $1 $(dbGetDeviceIdByDeviceAlias $2)
}

#---------------------------------
# dbRemoveDeviceIdFromPlotGroup()
#---------------------------------
function dbRemoveDeviceIdFromPlotGroup(){
  echo "  - Removing sensor id from plotgroup: $1 -> $2"
  sqlite3 $appDbFile<<EOT
  delete from plotgroup where groupname = '$1' and sensor_id = '$2';
EOT
}

#---------------------------------
# dbRemoveDeviceAliasFromPlotGroup()
#---------------------------------
function dbRemoveDeviceAliasFromPlotGroup(){
  echo "  - Removing sensor alias from plotgroup: $1 -> $2"
  dbRemoveDeviceIdFromPlotGroup $1 $(dbGetDeviceIdByDeviceAlias $2)
}


#===================================================================================================
# Plot Config functions
#===================================================================================================

#---------------------------------
# dbGetAllPlotConfigs()
#---------------------------------
function dbGetAllPlotConfigs(){
  sqlite3 $appDbFile<<EOT
  select distinct name from plotconfig;
EOT
}

#---------------------------------
# dbPrintPlotConfig_outputFormat()
#---------------------------------
function dbPrintPlotConfig_outputFormat(){
  cat | awk -F"|" '
       BEGIN {
         printFormat="%-20s %-20s %-12s %-7s %-10s %-10s %-10s\n";
         printf printFormat, "Name", "| Plot group", "| Time span", "| Width", "| Priority", "| Visible", "| rowid";
         printf "---------------------------------------------------------------------------------------------\n";
       }
       { 
         printf printFormat, $1, "  "$2, "  "$3, "  "$4, "  "$5, "  "$6, "  "$7;
       }'

}

#---------------------------------
# dbPrintPlotConfig()
#---------------------------------
function dbPrintPlotConfig(){
  local plotgconfig=""

  echo "Visible"
  echo "========"
  echo

  (
  sqlite3 $appDbFile <<EOT
    select name, plotgroup, timespan, size, prio, visible, rowid from plotconfig where visible='true' order by prio;
EOT
) | dbPrintPlotConfig_outputFormat

  echo
  echo "Invisible"
  echo "========="
  echo

(
  sqlite3 $appDbFile <<EOT
    select name, plotgroup, timespan, size, prio, visible, rowid from plotconfig where visible='false' order by prio;
EOT
) | dbPrintPlotConfig_outputFormat

}


#---------------------------------
# dbRemovePlotConfigByRowId()
#---------------------------------
function dbRemovePlotConfigByRowId(){
  local rowId="$1"

  logIt "Removing plot config row id: ${rowId}"
  sqlite3 $appDbFile <<EOT
    delete from plotconfig where rowid = '${rowId}';
EOT

}

#---------------------------------
# dbAddPlotGroupToPlotConfig()
#---------------------------------
function dbAddPlotGroupToPlotConfig(){

  local plotConfig="$1"
  local plotGroup="$2"
  local timeSpan="$3"
  local plotWidth="$4"
  local plotPriority="$5"
  local plotVisibility="$6"

  [ -z "$plotConfig" ]     && { errorExit "plotConfig not set" ;     }
  [ -z "$plotGroup" ]      && { errorExit "plotGroup not set" ;      }
  [ -z "$timeSpan" ]       && { errorExit "timeSpan not set"  ;      }
  [ -z "$plotWidth" ]      && { errorExit "plotWidth not set" ;      }
  [ -z "$plotPriority" ]   && { errorExit "plotPriority not set" ;   }
  [ -n "$plotVisibility" ] && { plotVisibility=false ;               }
  [ -z "$plotVisibility" ] && { plotVisibility=true ;                }

  logIt "* Adding plot config using the following values:"
  logIt "  - plotConfig=$plotConfig"
  logIt "  - plotGroup=$plotGroup"
  logIt "  - timeSpan=$timeSpan"
  logIt "  - plotWidth=$plotWidth"
  logIt "  - plotPriority=$plotPriority"
  logIt "  - plotVisibility=$plotVisibility"


  sqlite3 $appDbFile <<EOT
  insert into plotconfig (name, plotgroup, timespan, size, prio, visible) values ('$plotConfig', '$plotGroup', '$timeSpan', '$plotWidth', $plotPriority, '$plotVisibility');
EOT

  return 0
}

#---------------------------------
# dbSetupDatabase()
#---------------------------------
function dbSetupDatabase(){
  local tables="alias sensor sensorgroup sensormetric plotgroup plotconfig version"
  local table=""

  for table in $tables
  do
    if dbCheckTableExist $table
    then
      echo "    - Table $table exists"    
    else
      echo "    - Table $table does not exist -> creating"
      dbCreateTableFromDDLFile $table
    fi
  done
    
}


#---------------------------------
# dbCheckTableExist()
#---------------------------------
function dbCheckTableExist(){
  local tableName="$1"
  local res=$(
  sqlite3 $appDbFile<<EOT
      select count(name) from sqlite_master where type='table' and name = '$tableName';
EOT
)

  if [ $res -eq 1 ]
  then
    return 0
  else
    return 1
  fi

}

#---------------------------------
# dbCheckSensorExistById()
#---------------------------------
function dbCheckSensorExistById(){

  local sensorId="$1"
  local res=$(
  sqlite3 $appDbFile " select count(id) from sensor where id = '$sensorId';"
)

  if [ $res -eq 1 ]
  then
    return 0
  else
    return 1
  fi

}

function dbCheckDeviceExistById(){
  dbCheckSensorExistById $@
  return $?
}

#---------------------------------
# dbCreateTableFromDDLFile()
#---------------------------------
function dbCreateTableFromDDLFile(){
  local tableName="$1"
  echo "      - Creating table $tableName from ddl.sql"
  [ ! -f $baseDir/db/ddl.sql ] && { echo "Error: ddl.sql not found in $baseDir/db/ddl.sql" 1>&2 ; exit 1 ; }
  local ddlStatement=$(grep -i "create table $tableName " $baseDir/db/ddl.sql)

  [ -z "$ddlStatement" ] && { echo "Error: table $tableName not found in $baseDir/db/ddl.sql" 1>&2 ; exit 1; }

  sqlite3 $appDbFile<<EOT
$ddlStatement
EOT

}
