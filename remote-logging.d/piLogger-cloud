#!/bin/bash


########################################################
# this is the remote logging plugin for piLogger Cloud
# to get things up and running you will have to do the 
# following changes to your environment:
#
# 1. turn on remote logging if you dont have yet
#    you can do this by editing ~/piLogger/etc/piLogger.conf
#    and change remoteLogging=true
#
# 2. enable the piLogging Cloud Plugin by creating the following
#    symlink: cd /var/lib/piLogger/remote-logging-enabled
#             ln -s ~/piLogger/etc/remote-logging.d/piLogger-cloud
#
# 3. add the authToken of your user to the piLogger.conf
#    this should then looks like below:
#    authToken=e8c1458438ead3c34974bc0be3a03ed6
# 
# 4. make sure the deviceIdentifier is set in piLogger.conf
#
########################################################

#--------------------
# variables
#--------------------
this_dir=$(cd `dirname $0`;pwd)
this_script=$(basename $0)
configDir=$this_dir/../etc
cloudHost=api.pilogger.net

. $PILOGGER_BASE_DIR/etc/piLogger.conf
. $PILOGGER_BASE_DIR/bin/functions

#============================
# Available variables
#============================
# PILOGGER_BASE_DIR=$baseDir
# PILOGGER_AUTH_TOKEN=$authToken
# PILOGGER_DEVICE_IDENTIFIER=$deviceIdentifier
# PILOGGER_DEVICE_NAME="$HOSTNAME"
# PILOGGER_SENSOR="$sensor"
# PILOGGER_METRIC_VALUE="$temperature"
# PILOGGER_METRIC_TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")

#----------------------------------
# errorExit
#----------------------------------
function errorExit(){
  echo "$*" 1>&2
  usage
  exit 1
}

#----------------------------------
# Usage
#----------------------------------
function usage(){
  cat<<EOT

Usage:

  $this_script [ --registerDevice | --processSpoolDir ]

The following environment variables have to be set to run this script:

  * PILOGGER_BASE_DIR (i.e PILOGGER_BASE_DIR=/home/pi/piLogger)
  * PILOGGER_DEVICE_IDENTIFIER
  * PILOGGER_SENSOR
  * PILOGGER_METRIC_TIMESTAMP
  * PILOGGER_METRIC_VALUE

To send data to a remote host, the variable "authToken" and "deviceIdentifier" has to be set in etc/piLogger.conf

Example:

To register your device and sensors:

#--- if authToken and deviceIdentifier is set in etc/piLogger.conf
PILOGGER_BASE_DIR=/home/pi/piLogger $this_dir/$this_script --registerDevice

#--- if authToken and deviceIdentifier is not yet set in etc/piLogger.conf
PILOGGER_BASE_DIR=/home/pi/piLogger authToken=<your token> deviceIdentifier=\$(cat /sys/class/net/eth0/address | md5sum | cut -d" " -f1) ./$this_script --registerDevice

When sending data to piLogger-cloud, if debugging from the command line:

PILOGGER_BASE_DIR=/home/pi/piLogger PILOGGER_DEVICE_IDENTIFIER=$(cat /sys/class/net/eth0/address | md5sum | cut -d" " -f1) PILOGGER_SENSOR=test-device PILOGGER_METRIC_TIMESTAMP=\$(date "+%Y-%m-%d %H:%M:%S") PILOGGER_METRIC_VALUE=55.5 ./$this_script

EOT
}


#----------------------------------
# processSpoolDir()
#----------------------------------
function processSpoolDir(){
  
  # check if we have internet connection
  wget -q --spider http://google.com

  if [ $? -ne 0 ]; then
     logIt "Error: Seems like we dont have an internet connection"
     exit 1
  fi

  local tries=0

  logIt "============================================="
  logIt "  * Starting to send spool files (pid: $$)"
  logIt "============================================="
  for file in /var/spool/piLogger/${this_script}*
  do
     
     # get the needed data from file
     sensor=$( cat $file | cut -d"," -f 1)
     time=$( cat $file | cut -d"," -f 2)
     value=$( cat $file | cut -d"," -f 3) 
  
     # check that the file is not empty - remove otherwise and continue
     # see https://github.com/maglub/piLogger/issues/144 for details
     [ -z "$sensor" ] && { logIt "  - Error: $file does not contain any data, removing it." ; rm $file ; continue ; }
     
     response=$(curl -H 'Content-Type: application/json' -X PUT \
                --write-out "%{http_code}" --silent --output /dev/null \
                -d "{\"probeTime\": \"$time\",\"probeValue\": \"$value\",\"authToken\": \"$authToken\"}" \
                http://$cloudHost/api/sensor/$sensor )
     rc=$?

     local httpReturnCode=$response
     [ $rc -ne 0 ] && httpReturnCode=999

     # check the HTTP response header code
     # if all good we delete the spool file
     case $httpReturnCode in
       200)
         logIt "data sent - deleting $file"
         sudo rm $file
         ;;
       403)
         #--- Forbidden
         logIt "HTTP: $httpReturnCode (Forbidden). This sensor is most likely not registered yet. Deleting the file it."
         sudo rm $file
         ;;
       *)
         logIt "Error: $httpReturnCode Could not connect to $cloudHost to send file $file"
        (( tries = $tries + 1 ))
        ;;
     esac

     [ $tries -gt 1 ] && { logIt "Error: Multiple connection errors when connecting to $cloudHost" ; exit 1 ; }

  done 

}

#----------------------------------
# registerDevice()
#----------------------------------
function registerDevice(){

  echo "#--- Registering device with cloud"

  #===========================
  #--- register this device
  #===========================

  echo "#--- register this device"
  cat<<EOT
curl -q -w "%{http_code}\n" -H 'Content-Type: application/json' -X POST -d "{\"deviceName\":\"$HOSTNAME\",\"authToken\":\"$authToken\"}" http://$cloudHost/api/device/$deviceIdentifier
EOT

  #===========================
  #--- register all sensors on this device
  #===========================

  echo
  logIt "#--- register sensors for this device"
  for line in $($PILOGGER_BASE_DIR/bin/dbTool -l | awk 'NR>2 {OFS=";"; print $1,$3}')
  do
    sensorOriginalIdentifier=${line%%;*}  
    sensorIdentifier=$( echo $deviceIdentifier+$sensorOriginalIdentifier | md5sum | cut -d" " -f1 )
    sensorName=${line##*;}  

    logIt "Registering sensor: $sensorName/$sensorIdentifier/$sensorOriginalIdentifier"
    cat<<EOT
curl -q -w "%{http_code}\n" -H 'Content-Type: application/json' -X POST -d "{\"deviceIdentifier\":\"$deviceIdentifier\",\"sensorName\":\"$sensorName\",\"sensorType\":\"temperature\",\"authToken\":\"$authToken\"}" http://$cloudHost/api/sensor/$sensorIdentifier
EOT
done

  return 0
}

#===================================
# Setup environment
#===================================

[ -z "$PILOGGER_BASE_DIR" ] && { errorExit "Error: PILOGGER_BASE_DIR not set" ; }
[ ! -f "$PILOGGER_BASE_DIR/etc/piLogger.conf" ] && { errorExit "Error: file not found $PILOGGER_BASE_DIR/etc/piLogger.conf" ; }

. $PILOGGER_BASE_DIR/etc/piLogger.conf

#===========================
# MAIN
#===========================

[[ -n "$1" && "$1" = "--registerDevice" ]] && {
  registerDevice
  exit 0
}

[[ -n "$1" && "$1" = "--processSpoolDir" ]] && {
  processSpoolDir
  exit 0
}

#--- for the cloud logging to work, we need some of the variables
[ -z "$PILOGGER_DEVICE_IDENTIFIER" ] && { errorExit "Error: PILOGGER_DEVICE_IDENTIFIER not set" ; }
[ -z "$PILOGGER_SENSOR" ] && { errorExit "Error: PILOGGER_SENSOR not set" ; }
[ -z "$PILOGGER_METRIC_TIMESTAMP" ] && { errorExit "Error: PILOGGER_METRIC_TIMESTAMP not set" ; }
[ -z "$PILOGGER_METRIC_VALUE" ] && { errorExit "Error: PILOGGER_METRIC_VALUE not set" ; }
[ -z "$PILOGGER_METRIC_TYPE" ] && { errorExit "Error: PILOGGER_METRIC_TYPE not set" ; }

# calculate sensor id hash
PILOGGER_SENSOR_HASH=$( echo $PILOGGER_DEVICE_IDENTIFIER+$PILOGGER_SENSOR | md5sum | cut -d" " -f1 )

# now do the HTTP PUT request to the REST API
response=$(curl -H 'Content-Type: application/json' -X PUT \
                --write-out "%{http_code}" --silent \
                -d "{\"probeTime\": \"$PILOGGER_METRIC_TIMESTAMP\",\"probeValue\": \"$PILOGGER_METRIC_VALUE\",\"authToken\": \"$authToken\"}" \
                http://$cloudHost/api/sensor/$PILOGGER_SENSOR_HASH )
rc=$?

httpReturnCode=$(echo "$response" | tail -1 | sed -e 's/.*\(...\)/\1/')
[ $rc -ne 0 ] && httpReturnCode=999 # rc<>0 means that web server did not answer

# check the HTTP response header code
case $httpReturnCode in
  200)
    logIt "successfully sent measurement to piLogger cloud - $PILOGGER_SENSOR, $PILOGGER_SENSOR_HASH"
    ;;
   
  403)
    #--- Forbidden
    logIt "HTTP: $httpReturnCode. This sensor is most likely not registered yet. Ignoring it."
    logIt "    -> $response"
    ;;

  *)
    logIt "error: did get HTTP status code $response from REST api - something went wrong - $PILOGGER_SENSOR, $PILOGGER_SENSOR_HASH"

   # writing data to spool directory for later processing
   timenow=$(date +%s)
   spoolFileName=${this_script}_$$_$timenow
   spoolFileContent="${PILOGGER_SENSOR_HASH},${PILOGGER_METRIC_TIMESTAMP},${PILOGGER_METRIC_VALUE},${PILOGGER_SENSOR}"
  
   logIt "writing measured data to $spoolDir/$spoolFileName for later processing"
  
   echo $spoolFileContent >> $spoolDir/$spoolFileName
   ;;
esac
 
